#pragma warning(disable:4996)
#pragma once
//-------------------------------------------------------------------
//視界
//-------------------------------------------------------------------
#include "GameEngine_Ver3_7.h"

namespace  View
{
	//タスクに割り当てるグループ名と固有名
	const  string  defGroupName("視界");	//グループ名
	const  string  defName("NoName");	//タスク名
	//-------------------------------------------------------------------
	class  Resource
	{
		bool  Initialize();
		bool  Finalize();
		Resource();
	public:
		~Resource();
		typedef  shared_ptr<Resource>	SP;
		typedef  weak_ptr<Resource>		WP;
		static   WP  instance;
		static  Resource::SP  Create();
		//共有する変数はここに追加する
		string			imageName;
	};
	//-------------------------------------------------------------------
	class  Object : public  BTask
	{
	//変更不可◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆
	public:
		virtual  ~Object();
		typedef  shared_ptr<Object>		SP;
		typedef  weak_ptr<Object>		WP;
		//生成窓口 引数はtrueでタスクシステムへ自動登録
		static  Object::SP  Create(bool flagGameEnginePushBack_);
		Resource::SP	res;
	private:
		Object();
		bool  B_Initialize();
		bool  B_Finalize();
		bool  Initialize();	//「初期化」タスク生成時に１回だけ行う処理
		void  UpDate();		//「実行」１フレーム毎に行う処理
		void  Render2D_AF();	//「2D描画」１フレーム毎に行う処理
		bool  Finalize();		//「終了」タスク消滅時に１回だけ行う処理
	//変更可◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇
	public:
		//追加したい変数・メソッドはここに追加する
		enum View
		{
			ViewLeft,
			ViewRight
		};
		const int		Ang30 = 30;
		const int		Ang45 = 45;
		const int		Ang60 = 60;
		ML::Vec2		pos;			//位置
		ML::Vec2		centerVec;		//前を表すベクトル
		ML::Vec2		viewVec[2];		//視覚ベクトル(左右)
		ML::Box2D		hitBase;		//視界ベクトルの大きさ
		float			angle;			//前を0と考えた時の角度
		bool			hitFlag;		//視界ベクトルに当たっているか
		ML::Box2D		hitBase1;
		void	Create(ML::Vec2	pos_,float ang_);	//生成
		void	Set();								//設定
		float	Cross(ML::Vec2& v1,ML::Vec2& v2);
		float	Product(ML::Vec2& p1,ML::Vec2& p2);
		
	};
}